const a=(...i)=>e=>{for(let t=0;t<i.length;t++)i[t](e)};class u{constructor(e){Object.defineProperty(this,"entities",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"components",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"startupSystems",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"systems",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"nextId",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"resources",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"running",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"loop",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this.running&&(this.step(),requestAnimationFrame(this.loop))}}),this.resources=e,this.entities=new Set,this.components=new Map,this.startupSystems=[],this.systems=[]}addEntity(e=[]){const t=this.nextId++;this.entities.add(t);for(const n of e)this.addComponent(t,n);const s={add:n=>(this.addComponent(t,n),s),id:t};return s}addComponent(e,t){var s;const n=t.type;return this.components.has(n)||this.components.set(n,new Map),(s=this.components.get(n))===null||s===void 0||s.set(e,t),this}removeComponent(e,t){var s;return(s=this.components.get(t))===null||s===void 0||s.delete(e),this}removeEntity(e){var t;for(const s of this.components.keys())(t=this.components.get(s))===null||t===void 0||t.delete(e);return this.entities.delete(e),this}getComponent(e,t){var s;return(s=this.components.get(t))===null||s===void 0?void 0:s.get(e)}hasComponent(e,t){var s,n;return(n=(s=this.components.get(t))===null||s===void 0?void 0:s.has(e))!==null&&n!==void 0?n:!1}addSystem(e){return this.systems.push(e),this}addStartupSystem(e){return this.startupSystems.push(e),this}removeSystem(e,t=!1){const s=t?this.startupSystems:this.systems;for(let n=0;n<s.length;n++)if(s[n]===e){s.splice(n,1);break}return this}getEntities(){return this.entities[Symbol.iterator]()}clearEntities(){this.entities.clear(),this.components.clear()}clearSystems(){this.systems=[],this.startupSystems=[]}clear(){this.clearEntities(),this.clearSystems()}storeQueryTuple(e,t,s){s[0]=this.getComponent(t,e[0]);for(let n=1;n<e.length;n++){const r=e[n];s[n]=this.getComponent(t,r)}s[e.length]=t}checkRemainingComponents(e,t){for(let s=1;s<t.length;s++)if(!this.hasComponent(e,t[s]))return!1;return!0}query(e){var t;const s=[],n=(t=this.components.get(e[0]))===null||t===void 0?void 0:t.keys();if(n){for(const r of n)if(this.checkRemainingComponents(r,e)){const o=new Array(e.length+1);this.storeQueryTuple(e,r,o),s.push(o)}}return s}*queryIter(e){var t;const s=new Array(e.length+1),n=(t=this.components.get(e[0]))===null||t===void 0?void 0:t.keys();if(n)for(const r of n)this.checkRemainingComponents(r,e)&&(this.storeQueryTuple(e,r,s),yield s)}step(){for(let e=0;e<this.systems.length;e++)this.systems[e](this)}run(){return this.running=!0,this.startupSystems.forEach(e=>{e(this)}),this.loop(),this}stop(){return this.running=!1,this}}const l=i=>new u(i);export{l as a,a as c};
