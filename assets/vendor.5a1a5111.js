const h=(...u)=>s=>{u.forEach(e=>{e(s)})};class a{constructor(s){Object.defineProperty(this,"entities",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"components",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"startupSystems",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"systems",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"nextId",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"resources",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"getEntities",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.entities[Symbol.iterator]}),Object.defineProperty(this,"step",{enumerable:!0,configurable:!0,writable:!0,value:()=>{for(let e=0;e<this.systems.length;e++)this.systems[e](this);requestAnimationFrame(this.step)}}),this.resources=s,this.entities=new Set,this.components=new Map,this.startupSystems=[],this.systems=[]}addEntity(s){const e=this.nextId++;this.entities.add(e);for(const r of s)typeof r=="function"?this.addComponent(e,r(e,this)):this.addComponent(e,r);const t={add:r=>(this.addComponent(e,r),t),id:e};return t}addComponent(s,e){var t;const r=e.type;return this.components.has(r)||this.components.set(r,new Map),(t=this.components.get(r))===null||t===void 0||t.set(s,e),this}removeComponent(s,e){var t;return(t=this.components.get(e))===null||t===void 0||t.delete(s),this}removeEntity(s){var e;for(const t of this.components.keys())(e=this.components.get(t))===null||e===void 0||e.delete(s);return this.entities.delete(s),this}getComponent(s,e){var t;return(t=this.components.get(e))===null||t===void 0?void 0:t.get(s)}hasComponent(s,e){var t,r;return(r=(t=this.components.get(e))===null||t===void 0?void 0:t.has(s))!==null&&r!==void 0?r:!1}addSystem(s){return this.systems.push(s),this}addStartupSystem(s){return this.startupSystems.push(s),this}storeQueryTuple(s,e,t,r){r[0]=this.getComponent(t,s);for(let n=0;n<e.length;n++){const o=e[n];r[n+1]=this.getComponent(t,o)}r[e.length+1]=t}query(s,...e){var t,r;const n=[];for(const o of(r=(t=this.components.get(s))===null||t===void 0?void 0:t.keys())!==null&&r!==void 0?r:[])if(e.every(i=>this.hasComponent(o,i))){const i=new Array(e.length+2);this.storeQueryTuple(s,e,o,i),n.push(i)}return n}*queryIter(s,...e){var t,r;const n=new Array(e.length+2);for(const o of(r=(t=this.components.get(s))===null||t===void 0?void 0:t.keys())!==null&&r!==void 0?r:[])e.every(i=>this.hasComponent(o,i))&&(this.storeQueryTuple(s,e,o,n),yield n)}run(){return this.startupSystems.forEach(s=>{s(this)}),this.step(),this}}const l=u=>new a(u);export{l as a,h as c};
